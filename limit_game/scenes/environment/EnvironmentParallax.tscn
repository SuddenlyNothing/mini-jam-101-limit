[gd_scene load_steps=10 format=2]

[ext_resource path="res://assets/environment/city4.png" type="Texture" id=1]
[ext_resource path="res://assets/environment/city1.png" type="Texture" id=2]
[ext_resource path="res://assets/environment/city2.png" type="Texture" id=3]
[ext_resource path="res://assets/environment/city3.png" type="Texture" id=4]
[ext_resource path="res://assets/shaders/Fog.tres" type="Material" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Amount of detail.
uniform int octaves = 4;

// Opacity of the output fog.
uniform float starting_amplitude: hint_range(0.0, 0.5) = 0.5;

// Rate of pattern within the fog.
uniform float starting_frequency = 1.0;

// Shift towards transparency (clamped) for sparser fog.
uniform float shift: hint_range(-1.0, 0.0) = -0.2;

// Direction and speed of travel.
uniform vec2 velocity = vec2(1.0, 1.0);

// Color of the fog.
uniform vec4 fog_color: hint_color = vec4(0.0, 0.0, 0.0, 1.0);

// Noise texture; OpenSimplexNoise is great, but any filtered texture is fine.
uniform sampler2D noise;

float rand(vec2 uv) {
	float amplitude = starting_amplitude;
	float frequency = starting_frequency;
	float output = 0.0;
	for (int i = 0; i < octaves; i++) {
		output += texture(noise, uv * frequency).x * amplitude;
		amplitude /= 2.0;
		frequency *= 2.0;
	}
	return clamp(output + shift, 0.0, 1.0);
}

void fragment() {
	vec2 motion = vec2(rand(UV + TIME * starting_frequency * velocity));
	COLOR = mix(vec4(0.0), fog_color, rand(UV + motion));
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/octaves = 4
shader_param/starting_amplitude = 0.15
shader_param/starting_frequency = 4.0
shader_param/shift = -0.137
shader_param/velocity = Vector2( 0.001, -0.001 )
shader_param/fog_color = Color( 1, 1, 1, 0.784314 )
shader_param/noise = SubResource( 3 )

[node name="EnvironmentParallax" type="ParallaxBackground"]

[node name="Layer1" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.12, 0.12 )
motion_mirroring = Vector2( 1440, 700 )

[node name="Sprite" type="Sprite" parent="Layer1"]
modulate = Color( 1.2, 1.2, 1.2, 1 )
texture = ExtResource( 1 )
centered = false

[node name="Fog2" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.24, 0.24 )
motion_mirroring = Vector2( 1440, 700 )

[node name="ColorRect" type="ColorRect" parent="Fog2"]
material = SubResource( 4 )
margin_right = 1440.0
margin_bottom = 700.0

[node name="Layer2" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.16, 0.16 )
motion_mirroring = Vector2( 1440, 700 )

[node name="Sprite" type="Sprite" parent="Layer2"]
texture = ExtResource( 4 )
centered = false

[node name="Layer3" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.2, 0.2 )
motion_mirroring = Vector2( 1440, 700 )

[node name="Sprite" type="Sprite" parent="Layer3"]
texture = ExtResource( 3 )
centered = false

[node name="Layer4" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.24, 0.24 )
motion_mirroring = Vector2( 1440, 700 )

[node name="Sprite" type="Sprite" parent="Layer4"]
texture = ExtResource( 2 )
centered = false

[node name="Fog" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.5, 0.5 )
motion_mirroring = Vector2( 1440, 700 )

[node name="ColorRect" type="ColorRect" parent="Fog"]
material = ExtResource( 6 )
margin_right = 1440.0
margin_bottom = 700.0
